{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isaac\\\\OneDrive\\\\DOCS\\\\Documents\\\\fullstack\\\\javascript\\\\react\\\\appointment-planner-starting-v18\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport styles from './ContactsPage.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    handleContacts\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (duplicate === false) {\n      handleContacts(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n  useEffect(() => {\n    const found = contacts.some(item => item.name === name);\n    if (found) {\n      setDuplicate(true);\n    }\n  }, [name, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.section,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.h2,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        handleSubmit: handleSubmit,\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.section,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        data: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"BYxyrn6t6cgckC7hvAUC646tH1A=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","styles","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","handleContacts","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","found","some","item","children","className","section","h2","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["C:/Users/isaac/OneDrive/DOCS/Documents/fullstack/javascript/react/appointment-planner-starting-v18/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\nimport styles from './ContactsPage.module.css'\r\n\r\nexport const ContactsPage = ({contacts, handleContacts}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const [name, setName] = useState('');\r\n const [phone, setPhone] = useState('');\r\n const [email, setEmail] = useState('');\r\n const [duplicate, setDuplicate] = useState(false);\r\n\r\n \r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if(duplicate === false){\r\n        handleContacts(name, phone, email);\r\n        setName('');\r\n        setPhone('');\r\n        setEmail('');\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(()=>{\r\n    const found = contacts.some(item => item.name === name);\r\n    if(found){\r\n      setDuplicate(true);\r\n    }\r\n\r\n  }, [name,contacts])\r\n\r\n  return (\r\n    <div>\r\n      <section className={styles.section}>\r\n        <h2 className={styles.h2}>Add Contact</h2> \r\n        <ContactForm \r\n          handleSubmit={handleSubmit} \r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section className={styles.section}>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}